{"version":3,"file":"deep-equals.js","sources":["src/deep-equals.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nexport const deepArrayEquals = <T extends ReadonlyArray<unknown>>(\n  oldArgs: T,\n  newArgs: T\n) =>\n  oldArgs === newArgs ||\n  (oldArgs.length === newArgs.length &&\n    oldArgs.every((v, i) => deepEquals(v, newArgs[i])));\n\nconst objectValueOf = Object.prototype.valueOf;\nconst objectToString = Object.prototype.toString;\nconst {keys: objectKeys} = Object;\nconst {isArray} = Array;\n\n/**\n * Recursively checks two objects for equality.\n *\n * This function handles the following cases:\n *  - Primitives: primitives compared with Object.is()\n *  - Objects: to be equal, two objects must:\n *    - have the same constructor\n *    - have same set of own property names\n *    - have each own property be deeply equal\n *  - Arrays, Maps, Sets, and RegExps\n *  - Objects with custom valueOf() (ex: Date)\n *  - Objects with custom toString() (ex: URL)\n *\n * Important: Objects must be free of cycles, otherwise this function will\n * run infinitely!\n */\nexport const deepEquals = (a: unknown, b: unknown): boolean => {\n  if (Object.is(a, b)) {\n    return true;\n  }\n\n  if (\n    a !== null &&\n    b !== null &&\n    typeof a === 'object' &&\n    typeof b === 'object'\n  ) {\n    // Object must have the same prototype / constructor\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n\n    // Arrays must have the same length and recursively equal items\n    if (isArray(a)) {\n      if (a.length !== (b as Array<unknown>).length) {\n        return false;\n      }\n      return a.every((v, i) => deepEquals(v, (b as Array<unknown>)[i]));\n    }\n\n    // Defer to custom valueOf implementations. This handles Dates which return\n    // ms since epoch: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf\n    if (a.valueOf !== objectValueOf) {\n      return a.valueOf() === b.valueOf();\n    }\n\n    // Defer to custom toString implementations. This should handle\n    // TrustedTypes, URLs, and such. This might be a bit risky, but\n    // fast-deep-equals does it.\n    if (a.toString !== objectToString) {\n      return a.toString() === b.toString();\n    }\n\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) {\n        return false;\n      }\n      for (const [k, v] of a.entries()) {\n        if (\n          deepEquals(v, b.get(k)) === false ||\n          (v === undefined && b.has(k) === false)\n        ) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) {\n        return false;\n      }\n      for (const k of a.keys()) {\n        if (b.has(k) === false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    if (a instanceof RegExp) {\n      return (\n        a.source === (b as RegExp).source && a.flags === (b as RegExp).flags\n      );\n    }\n\n    // We have two objects, check every key\n    const keys = objectKeys(a) as Array<keyof typeof a>;\n\n    if (keys.length !== objectKeys(b).length) {\n      return false;\n    }\n\n    for (const key of keys) {\n      if (!b.hasOwnProperty(key) || !deepEquals(a[key], b[key])) {\n        return false;\n      }\n    }\n\n    // All keys in the two objects have been compared!\n    return true;\n  }\n\n  return false;\n};\n"],"names":["deepArrayEquals","oldArgs","newArgs","length","every","v","i","deepEquals","objectValueOf","Object","prototype","valueOf","objectToString","toString","keys","objectKeys","isArray","Array","a","b","is","constructor","Map","size","k","entries","get","undefined","has","Set","RegExp","source","flags","key","hasOwnProperty"],"mappings":";;;;;AAMO,MAAMA,EAAkB,CAC7BC,EACAC,IAEAD,IAAYC,GACXD,EAAQE,SAAWD,EAAQC,QAC1BF,EAAQG,OAAM,CAACC,EAAGC,IAAMC,EAAWF,EAAGH,EAAQI,MAE5CE,EAAgBC,OAAOC,UAAUC,QACjCC,EAAiBH,OAAOC,UAAUG,UACjCC,KAAMC,GAAcN,QACrBO,QAACA,GAAWC,MAkBLV,EAAa,CAACW,EAAYC,KACrC,GAAIV,OAAOW,GAAGF,EAAGC,GACf,OAAO,EAGT,GACQ,OAAND,GACM,OAANC,GACa,iBAAND,GACM,iBAANC,EACP,CAEA,GAAID,EAAEG,cAAgBF,EAAEE,YACtB,OAAO,EAIT,GAAIL,EAAQE,GACV,OAAIA,EAAEf,SAAYgB,EAAqBhB,QAGhCe,EAAEd,OAAM,CAACC,EAAGC,IAAMC,EAAWF,EAAIc,EAAqBb,MAK/D,GAAIY,EAAEP,UAAYH,EAChB,OAAOU,EAAEP,YAAcQ,EAAER,UAM3B,GAAIO,EAAEL,WAAaD,EACjB,OAAOM,EAAEL,aAAeM,EAAEN,WAG5B,GAAIK,aAAaI,KAAOH,aAAaG,IAAK,CACxC,GAAIJ,EAAEK,OAASJ,EAAEI,KACf,OAAO,EAET,IAAK,MAAOC,EAAGnB,KAAMa,EAAEO,UACrB,IAC8B,IAA5BlB,EAAWF,EAAGc,EAAEO,IAAIF,UACbG,IAANtB,IAAgC,IAAbc,EAAES,IAAIJ,GAE1B,OAAO,EAGX,OAAO,CACR,CAED,GAAIN,aAAaW,KAAOV,aAAaU,IAAK,CACxC,GAAIX,EAAEK,OAASJ,EAAEI,KACf,OAAO,EAET,IAAK,MAAMC,KAAKN,EAAEJ,OAChB,IAAiB,IAAbK,EAAES,IAAIJ,GACR,OAAO,EAGX,OAAO,CACR,CAED,GAAIN,aAAaY,OACf,OACEZ,EAAEa,SAAYZ,EAAaY,QAAUb,EAAEc,QAAWb,EAAaa,MAKnE,MAAMlB,EAAOC,EAAWG,GAExB,GAAIJ,EAAKX,SAAWY,EAAWI,GAAGhB,OAChC,OAAO,EAGT,IAAK,MAAM8B,KAAOnB,EAChB,IAAKK,EAAEe,eAAeD,KAAS1B,EAAWW,EAAEe,GAAMd,EAAEc,IAClD,OAAO,EAKX,OAAO,CACR,CAED,OAAO,CAAK"}