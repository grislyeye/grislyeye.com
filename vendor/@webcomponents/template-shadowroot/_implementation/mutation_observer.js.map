{"version":3,"file":"mutation_observer.js","sourceRoot":"","sources":["../src/_implementation/mutation_observer.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,kBAAkB,EAAE,MAAM,6BAA6B,CAAC;AAEjE,OAAO,EAAE,+BAA+B,EAAE,MAAM,qBAAqB,CAAC;AAEtE,MAAM,UAAU,oBAAoB,CAAC,SAAe,QAAQ;IAC1D,IAAI,+BAA+B,EAAE,EAAE;QACrC,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,OAAO,KAAI,CAAC,EAAE,CAAC,CAAC,aAAa;KACpE;IACD,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE;QAC7D,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAChC,kEAAkE;YAClE,mEAAmE;YACnE,mEAAmE;YACnE,2CAA2C;YAC3C,cAAc;YACd,kBAAkB,CAAC,QAAQ,CAAC,MAA+B,CAAC,CAAC;SAC9D;IACH,CAAC,CAAC,CAAC;IACH,gBAAgB,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IACrE,OAAO;QACL,gBAAgB;QAChB,OAAO;YACL,gBAAgB,CAAC,UAAU,EAAE,CAAC;QAChC,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport { hydrateShadowRoots } from './default_implementation.js';\n\nimport { hasNativeDeclarativeShadowRoots } from './feature_detect.js';\n\nexport function transformShadowRoots(within: Node = document) {\n  if (hasNativeDeclarativeShadowRoots()) {\n    return { mutationObserver: undefined, cleanup() {} }; // do nothing\n  }\n  const mutationObserver = new MutationObserver((mutations, _) => {\n    for (const mutation of mutations) {\n      // TODO(rictic): test with streamed HTML that pauses in the middle\n      //     of a <template shadowrootmode> element. Do we get a mutation\n      //     with only part of the template's contents? What happens when\n      //     we remove the template from the DOM?\n      //     Tricky!\n      hydrateShadowRoots(mutation.target as unknown as ParentNode);\n    }\n  });\n  mutationObserver.observe(within, { childList: true, subtree: true });\n  return {\n    mutationObserver,\n    cleanup() {\n      mutationObserver.disconnect();\n    },\n  };\n}\n"]}