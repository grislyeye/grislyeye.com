{"version":3,"file":"feature_detect.js","sourceRoot":"","sources":["../src/_implementation/feature_detect.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AASH,mEAAmE;AACnE,4CAA4C;AAC5C,iEAAiE;AACjE,IAAI,SAA4B,CAAC;AACjC,MAAM,UAAU,+BAA+B;;IAC7C,IAAI,SAAS,KAAK,SAAS,EAAE;QAC3B,MAAM,IAAI,GAAG,wDAAwD,CAAC;QACtE,MAAM,QAAQ,GAAI,IAAI,SAAS,EAAgB,CAAC,eAAe,CAAC,IAAI,EAAE,WAAW,EAAE;YACjF,kBAAkB,EAAE,IAAI;SACzB,CAAC,CAAC;QACH,SAAS,GAAG,CAAC,CAAC,CAAA,MAAA,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,0CAAE,UAAU,CAAA,CAAC;KACzD;IACD,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// lib.dom.ts is out of date, so declare our own parseFromString here.\ninterface DOMParser {\n  parseFromString(string: string, type: DOMParserSupportedType, options?: {\n    includeShadowRoots: boolean;\n  }): Document;\n}\n\n// This isn't ideal. Setting .innerHTML is not compatible with some\n// TrustedTypes CSP policies. Discussion at:\n//     https://github.com/mfreed7/declarative-shadow-dom/issues/3\nlet hasNative: boolean|undefined;\nexport function hasNativeDeclarativeShadowRoots(): boolean {\n  if (hasNative === undefined) {\n    const html = `<div><template shadowrootmode=\"open\"></template></div>`;\n    const fragment = (new DOMParser() as DOMParser).parseFromString(html, 'text/html', {\n      includeShadowRoots: true\n    });\n    hasNative = !!fragment.querySelector('div')?.shadowRoot;\n  }\n  return hasNative;\n}\n"]}