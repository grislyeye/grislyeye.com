{"version":3,"file":"queryselectorall.js","sourceRoot":"","sources":["../src/_implementation/queryselectorall.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAC,+BAA+B,EAAC,MAAM,qBAAqB,CAAC;AAkBpE;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,IAA8B,EAAE,EAAE;IACnE,IAAI,+BAA+B,EAAE,EAAE;QACrC,OAAO,CAAE,gBAAgB;KAC1B;IACD,MAAM,KAAK,GAAiB,CAAC;YAC3B,QAAQ,EAAE,SAAS;YACnB,SAAS,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,EAAE;SACnE,CAAC,CAAC;IACH,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;QACvB,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACxC,MAAM,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;QAC9C,IAAI,aAAa,KAAK,SAAS,EAAE;YAC/B,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;YAClC,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC1B,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAc,CAAC;gBACrC,MAAM,IAAI,GAAG,QAAQ,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;gBACrD,IAAI,IAAI,KAAK,MAAM,IAAI,IAAI,KAAK,QAAQ,EAAE;oBACxC,MAAM,cAAc,GAChB,QAAQ,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;oBACtD,IAAI;wBACF,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,cAAc,EAAC,CAAC,CAAC;wBACzD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;qBACjC;oBAAC,MAAM;wBACN,mCAAmC;wBACnC,oCAAoC;qBACrC;oBACD,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;iBAC5B;aACF;YACD,KAAK,CAAC,GAAG,EAAE,CAAC;YACZ,SAAS;SACV;QACD,KAAK,CAAC,IAAI,CAAC;YACT,QAAQ,EAAE,aAAa;YACvB,SAAS,EAAE,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;iBACzD,OAAO,EAAE;SAC1B,CAAC,CAAC;KACJ;AACH,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {hasNativeDeclarativeShadowRoots} from './feature_detect.js';\n\ninterface StackEntry {\n  /**\n   * The nearest ancestor <template> element, if any, of the templates.\n   */\n  template: HTMLTemplateElement|undefined;\n  /**\n   * A stack of template elements inside `template` – or `root` if `template` is\n   * undefined – to be processed.\n   *\n   * The array is in reverse document order, such that the elements at the end\n   * of the array should be processed first (so that we can use templates.pop()\n   * to get the next element to process).\n   */\n  templates: HTMLTemplateElement[];\n}\n\n/*\n * Traverses the DOM to find all <template> elements with a `shadowroot`\n * attribute and move their content into a ShadowRoot on their parent element.\n *\n * This processing is done bottom up so that when top-level <template>\n * elements are hydrated, their contents are already hydrated and in the\n * final correct structure of elements and shadow roots.\n */\nexport const hydrateShadowRoots = (root: Element|DocumentFragment) => {\n  if (hasNativeDeclarativeShadowRoots()) {\n    return;  // nothing to do\n  }\n  const stack: StackEntry[] = [{\n    template: undefined,\n    templates: Array.from(root.querySelectorAll('template')).reverse()\n  }];\n  while (stack.length > 0) {\n    const context = stack[stack.length - 1];\n    const childTemplate = context.templates.pop();\n    if (childTemplate === undefined) {\n      const template = context.template;\n      if (template !== undefined) {\n        const host = template.parentElement!;\n        const mode = template.getAttribute('shadowrootmode');\n        if (mode === 'open' || mode === 'closed') {\n          const delegatesFocus =\n              template.hasAttribute('shadowrootdelegatesfocus');\n          try {\n            const shadow = host.attachShadow({mode, delegatesFocus});\n            shadow.append(template.content);\n          } catch {\n            // there was already a shadow root.\n            // TODO(rictic): log an error event?\n          }\n          host.removeChild(template);\n        }\n      }\n      stack.pop();\n      continue;\n    }\n    stack.push({\n      template: childTemplate,\n      templates: Array.from(childTemplate.content.querySelectorAll('template'))\n                     .reverse()\n    });\n  }\n};\n"]}